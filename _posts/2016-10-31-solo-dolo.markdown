---
layout: post
title:  "SOLO DOLO"
date:   2016-10-31
categories: jekyll update
---

<img src="/assets/profpic.JPG" width="300">

What did you do this past week?

- Pretty much nothing. It was a very light week and I was enjoying my time off. HOWEVER, I had to start on the Darwin project and grind on it until I managed to get a somewhat working version.

What's in your way?

- Somehow manage to finish Darwin along with taking the algo test and my perspectives on deafness test (I actually made this class pass-fail to ease the workload). I have faith in my abilities to clutch myself super hard. After all, at the end of the day it isn't just about you versus yourself. It's you versus the computer!

What will you do next week?

- Study for the algo test to the best of my abilities, work on Darwin when I can and hopefully finish it in due time, and somehow pull a decent grade on the deafness test. After this all ends I cannot wait for the relief I will feel.

Tip of the week

- Playing video games is a waste of time.

C++ is a double-edged sword. It is very efficient and flexible in certain aspects, but it is also very difficult in order to get right. I learned this the hard way when I tried to implement Darwin and it took me quite a bit of time just to lay out the entire class structure. Even after that, I forgot to not use setters and getters (and consequently make all of the variables in the classes private!) which caused more work. 

However, programming without setters and getters allows the code to become SO MUCH cleaner that it's ridiculous. Now I understand the purpose of Darwin - to make you write and design better code given a set of restrictions. When I just passed in, say a Creature object, I had to deal with a bunch of messy arithmetic (with regards to the grid) and it made the code more difficult to read and reason with. When you force the object to handle it's own affairs, not only does the code become more portable (because now you created a common interface) but it also is easier to debug.

I now need to put some code in the C++ file, since all of my code is currently in the header file. This is bad for 2 reasons: readability, ease of changing implementations, and testing. Google test needs the implementations to be in the C++ file, so when it comes time to make the unit tests I have to put most of the code in the C++ file. 
